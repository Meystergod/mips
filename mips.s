    .data

double_dat:
    .asciiz ": "

next_element:
    .asciiz "   "

next_line:
    .asciiz "\n"

input_array:
    .asciiz "\nИсходный массив:\n\n"

enter_element_array:
    .asciiz "Введите элемент строки №"

enter_line_array:
    .asciiz "Ввод строки №"

rotate90_array:
    .asciiz "\nМассив, повёрнутый на 90 градусов:\n\n"

rotate180_array:
    .asciiz "\nМассив, повёрнутый на 180 градусов:\n\n"

rotate270_array:
    .asciiz "\nМассив, повёрнутый на 270 градусов:\n\n"

error_size:
    .asciiz "Введена некорректная размерность. Размерность должна быть больше 0.\n"

enter_size_array:
    .asciiz "\nВведите размерность массива: "

elem_size:
    .word 4

number_line:
    .word 0

end_array_point:
    .word 0

start_array_point:
    .word 0

total_line_size:
    .word 0

total_array_size:
    .word 0

    .text
    .globl main

main:
    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    # Передача адреса строки в регистр для вывода
    la $a0, enter_size_array
    syscall

    # Ввод значения
    # Системный вызов 5 - ввод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 5
    syscall

    # Проерка размерности (если размерность <= 0, то завершается программа с сообщение об ошибке)
    ble $v0, 0, error_number_line

    # Сохранение значения из регистра в память
    sw $v0, number_line

    # Выделение памяти
    # Заносим в регистр размер одного символа
    lw $t0, elem_size
    # Заносим в регистр размерность
    lw $t1, number_line
    # Перемножаем
    mul $t2, $t0, $t1
    # Сохранение значения объема памяти в строке из регистра в память
    sw $t2, total_line_size
    # Перемножаем значение объема памяти в строке и размерность
    mul $t3, $t1, $t2
    # Сохранение значения объема памяти всей матрицы из регистра в память
    sw $t3, total_array_size

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

    # Запуск функции инициализации массива
    jal init_array

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, input_array
    syscall

    # Запуск функции вывода исходного массива
    jal print_array

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, rotate90_array
    syscall

    # Запуск функции вывода массива, повёрнутого на 90 градусов по часовой стрелке
    jal start_rotate_matrix_90

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, rotate180_array
    syscall

    # Запуск функции вывода массива, повёрнутого на 180 градусов по часовой стрелке
    jal start_rotate_matrix_180


    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, rotate270_array
    syscall

    # Запуск функции вывода массива, повёрнутого на 270 градусов по часовой стрелке
    jal start_rotate_matrix_270

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

    # Завершение программы
    # Системный вызов 10 - снятие программы с выполнения, инициализируемый командой syscall
    li $v0, 10
    syscall

# Функция инициализации и заполнения массива
init_array:
    # Выделение памяти
    # Системный вызов 9 - аллокация памяти из n байт, инициализируемый командой syscall
    li $v0, 9
    # Где n - это total_array_size
    lw $a0, total_array_size
    syscall
    # Копируем указатель на начало массива из регистра v0 в регистр s7 для сохранения значения
    move $s7, $v0
    # Сохраняем указатель на начало массива в памяти
    sw $v0, start_array_point

    # t1 - счётчик строк
    # t2 - размерность
    li $t1, 0
    lw $t2, number_line
    li $t4, 0

# Функция реализации строк
enter_line:
    # t3 - счётчик элементов
    li $t3, 0
    # Проверка на кол-во введённых строк
    beq $t1, $t2, end_init_array
    # Увеличение счётчика кол-ва строк на 1
    addi $t1, $t1, 1

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, enter_line_array
    syscall

    # Вывод числа
    # Системный вызов 1 - вывод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 1
    # Копируем значение текущей строки из регистра t1 в регистр a0
    move $a0, $t1
    syscall

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

# Функция ввода элементов строки
enter_element:
    # Увеличение счётчика кол-ва элементов строки на 1
    addi $t3, $t3, 1

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, enter_element_array
    syscall

    # Вывод числа
    # Системный вызов 1 - вывод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 1
    # Копируем значение текущего элемента строки из регистра t3 в регистр a0
    move $a0, $t3
    syscall

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, double_dat
    syscall

    # Ввод значения
    # Системный вызов 5 - ввод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 5
    syscall

    # Смещение коретки относительного одного введёного числа
    add $s7, $s7, $t4
    sw $v0, 0($s7)
    lw $t4, elem_size

    # Проверка на кол-во введённых элементов строки
    # Если если введенны не все, то повторяем ввод
    blt $t3, $t2, enter_element
    # Если введенны все, то переходим к вводу следующей строки
    beq $t3, $t2, enter_line

# Функция завершения инициализации и заполнения массива
end_init_array:
    # Завершение выполнения функции
    jr $ra

# Функция вывода исходного массива
print_array:
    # Заносим в регистр размерность
    lw $t0, number_line
    # Обнуление регистров
    # t1 - счётчик строк
    # t2 - счётчик элементов строки
    # t3 - смещение коретки, после вывода одного элемента
    li $t1, 0
    li $t2, 0
    li $t3, 0
    # Заносим в регистр указатель на начало массива
    lw $s7, start_array_point

# Функция вывода строки
print_line:
    # Првоерка на кол-во введённых строк
    beq $t1, $t0, end_print_array
    # Првоерка на кол-во введённых элементов строки
    beq $t2, $t0, print_line_end

    # Смещение указатель на один элемент вперёд
    add $s7, $s7, $t3
    # Загружаем в регистр размер одного элемента, для дальнейшего смещения
    lw $t3, elem_size

    # Вывод числа
    # Системный вызов 1 - вывод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 1
    lw $a0, 0($s7)
    syscall

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_element
    syscall

    # Увеличение счётчика элементов строки на 1
    addi $t2, $t2, 1
    # Повтор функции
    j print_line

# Функция перехода на новую строку
print_line_end:
    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

    # Обнуление счётчика элементов строки
    li $t2, 0
    # Увеличение счётчика строк на 1
    addi $t1, $t1, 1
    # Повтор функции
    j print_line

# Функция окончания вывода исходного массива
end_print_array:
    # Сохранение указателя на конец массива в память
    sw $s7, end_array_point
    # Завершение выполнения функции
    jr $ra

# Функция вывода массива, который повёрнут на 90 градусов по часовой стрелке
start_rotate_matrix_90:
    # Заносим в регистр размерность
    lw $t0, number_line
    # Заносим в регистр объём памяти одной строки
    lw $t4, total_line_size
    # Обнуление регистров
    # t1 - счётчик строк
    # t2 - счётчик элементов строки
    # t3 - смещение коретки, после вывода одного элемента
    li $t1, 0
    li $t2, 0
    li $t3, 0
    # Заносим в регистр объём памяти всей матрицы
    lw $t6, total_array_size
    # Заносим в регистр объём памяти одного элемента
    lw $t5, elem_size
    # Смещение указателя на один элемент вперёд
    add $s7, $s7, $t5

# Функция вывода строк массива, который повёрнут на 90 градусов по часовой стрелке
rotate_matrix_90:
    # Првоерка на кол-во введённых строк
    beq $t1, $t0, end_print_matrix_90
    # Првоерка на кол-во введённых элементов строки
    beq $t2, $t0, next_line_rotate_90

    # Смещение указателя на количество элементов одной строки назад
    sub $s7, $s7, $t4
    # Вывод числа
    # Системный вызов 1 - вывод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 1
    lw $a0, 0($s7)
    syscall

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_element
    syscall

    # Увеличение счётчика элементов строки на 1
    addi $t2, $t2, 1
    # Повтор функции
    j rotate_matrix_90

# Функция перехода на новую строку
next_line_rotate_90:
    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

    # Смещение указателя на количество элементов всей матрицы вперёд
    add $s7, $s7, $t6
    # Смещение указателя на один элемент вперёд
    add $s7, $s7, $t5

    # Увеличение счётчика строк на 1
    addi $t1, $t1, 1
    # Обнуление счётчика элементов строки
    li $t2, 0
    # Повтор функции
    j rotate_matrix_90

# Функция окончания вывода массива, который повёрнут на 90 градусов по часовой стрелке
end_print_matrix_90:
    # Завершение выполнения функции
    jr $ra

# Функция вывода массива, который повёрнут на 180 градусов по часовой стрелке
start_rotate_matrix_180:
    # Заносим в регистр размерность
    lw $t0, number_line
    li $t1, 0
    li $t2, 0
    # Заносим в регистр указатель на конец массива
    lw $t3, end_array_point
    # Заносим в регистр объём памяти одного элемента
    lw $t5, elem_size

    # Копируем указатель на конец массива из регистра t3 в регистр s7
    move $s7, $t3
    # Смещение указателя на один элемент вперёд
    add $s7, $s7, $t5

# Функция вывода строк массива, который повёрнут на 180 градусов по часовой стрелке
rotate_matrix_180:
    # Првоерка на кол-во введённых строк
    beq $t1, $t0, end_print_matrix_180
    # Првоерка на кол-во введённых элементов строки
    beq $t2, $t0, next_line_rotate_180

    # Смещение указателя на один элемент назад
    sub $s7, $s7, $t5
    # Вывод числа
    # Системный вызов 1 - вывод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 1
    lw $a0, 0($s7)
    syscall

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_element
    syscall

    # Увеличение счётчика элементов строки на 1
    addi $t2, $t2, 1
    # Повтор функции
    j rotate_matrix_180

# Функция перехода на новую строку
next_line_rotate_180:
    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

    # Увеличение счётчика строк на 1
    addi $t1, $t1, 1
    # Обнуление счётчика элементов строки
    li $t2, 0
    # Повтор функции
    j rotate_matrix_180

# Функция окончания вывода массива, который повёрнут на 180 градусов по часовой стрелке
end_print_matrix_180:
    # Завершение выполнения функции
    jr $ra

# Функция вывода массива, который повёрнут на 270 градусов по часовой стрелке
start_rotate_matrix_270:
    # Заносим в регистр размерность
    lw $t0, number_line
    li $t1, 0
    li $t2, 0
    # Заносим в регистр указатель на начало массива
    lw $t3, start_array_point
    # Заносим в регистр объём памяти одной строки
    lw $t4, total_line_size
    # Заносим в регистр объём памяти одного элемента
    lw $t5, elem_size
    # Заносим в регистр объём памяти всей матрицы
    lw $t6, total_array_size

    # Копируем указатель на конец массива из регистра t3 в регистр s7
    move $s7, $t3
    # Смещение указателя на один элемент назад
    sub $s7, $s7, $t5

# Функция вывода строк массива, который повёрнут на 270 градусов по часовой стрелке
rotate_matrix_270:
    # Првоерка на кол-во введённых строк
    beq $t1, $t0, end_print_matrix_270
    # Првоерка на кол-во введённых элементов строки
    beq $t2, $t0, next_line_rotate_270

    # Смещение указателя на количество элементов одной строки
    add $s7, $s7, $t4
    # Вывод числа
    # Системный вызов 1 - вывод 32-битного целого числа, инициализируемый командой syscall
    li $v0, 1
    lw $a0, 0($s7)
    syscall

    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_element
    syscall

    # Увеличение счётчика элементов строки на 1
    addi $t2, $t2, 1
    # Повтор функции
    j rotate_matrix_270

# Функция перехода на новую строку
next_line_rotate_270:
    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, next_line
    syscall

    # Смещение указателя на количество элементов всей матрицы назад
    sub $s7, $s7, $t6
    # Смещение указателя на один элемент назад
    sub $s7, $s7, $t5

    # Увеличение счётчика строк на 1
    addi $t1, $t1, 1
    # Обнуление счётчика элементов строки
    li $t2, 0
    # Повтор функции
    j rotate_matrix_270

# Функция окончания вывода массива, который повёрнут на 270 градусов по часовой стрелке
end_print_matrix_270:
    # Завершение выполнения функции
    jr $ra

# Проверка размерности
error_number_line:
    # Вывод сообщения
    # Системный вызов 4 - вывод строки, инициализируемый командой syscall
    li $v0, 4
    la $a0, error_size
    syscall

    # Повтор функции main
    jal main
